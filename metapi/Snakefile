#!/usr/bin/env snakemake
import sys
import metapi
import pandas as pd

shell.executable("bash")

configfile: "config.yaml"

IS_PE = True if config["params"]["reads_layout"] == "pe" else False

SAMPLES = metapi.parse_samples(
    config["params"]["samples"],
    config["params"]["reads_format"],
    IS_PE,
    True)

SAMPLES_ID = SAMPLES_ID = metapi.parse_cobin_samples_id(
    SAMPLES,
    config["params"]["cobinning"]["do"],
    config["params"]["cobinning"]["samples_id"],
    config["params"]["cobinning"]["rename"],
    config["params"]["cobinning"]["rename_id"])

include: "rules/output.smk"

if config["params"]["reads_format"] == "sra":
    include: "rules/sra2fq.smk"

if config["params"]["simulation"]["do"]:
   include: "rules/simulation.smk"

if config["params"]["begin"] == "raw":
    include: "rules/fastqc.smk"
    include: "rules/trimming.smk"
    include: "rules/rmhost.smk"

include: "rules/assembly.smk"
include: "rules/coassembly.smk"
include: "rules/metaquast.smk"
include: "rules/prediction.smk"
include: "rules/alignment.smk"
include: "rules/binning.smk"
include: "rules/cobinning.smk"
include: "rules/checkm.smk"
include: "rules/annotation.smk"
include: "rules/classification.smk"
include: "rules/profiling.smk"
include: "rules/burst.smk"
include: "rules/upload.smk"
include: "rules/dereplication.smk"

rule all:
    input:
        all_target

rule debug:
    input:
        debug_target
