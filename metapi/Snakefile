#!/usr/bin/env snakemake
import sys
import metapi
import pandas as pd
from pprint import pprint

shell.executable("bash")

configfile: "config.yaml"

IS_PE = True \
    if config["params"]["reads_layout"] == "pe" \
       else False

RMHOST_DO = True \
    if config["params"]["rmhost"]["bwa"]["do"] or \
       config["params"]["rmhost"]["bowtie2"]["do"] \
       else False

TRIMMING_DO = True \
    if config["params"]["trimming"]["oas1"]["do"] or \
       config["params"]["trimming"]["sickle"]["do"] or \
       config["params"]["trimming"]["fastp"]["do"] \
       else False

ASSEMBLERS = []
if config["params"]["assembly"]["megahit"]["do"]:
    ASSEMBLERS += ["megahit"]
if config["params"]["assembly"]["idba_ud"]["do"]:
    ASSEMBLERS += ["idba_ud"]
if config["params"]["assembly"]["metaspades"]["do"]:
    ASSEMBLERS += ["metaspades"]
if config["params"]["assembly"]["spades"]["do"]:
    ASSEMBLERS += ["spades"]

BINNERS = []
if config["params"]["binning"]["metabat2"]["do"]:
    BINNERS += ["metabat2"]
if config["params"]["binning"]["maxbin2"]["do"]:
    BINNERS += ["maxbin2"]


if config["params"]["simulate"]["do"]:
    SAMPLES = metapi.parse_genomes(config)
else:
    SAMPLES = metapi.parse_samples(config)

if config["params"]["cobinning"]["do"]:
    SAMPLES_ID = metapi.parse_cobin_samples_id(SAMPLES, config)

pprint(SAMPLES)

READS_FORMAT = "sra" \
    if "sra" in SAMPLES.columns \
       else "fastq"


include: "rules/simulate.smk"
include: "rules/prepare.smk"
include: "rules/trimming.smk"
include: "rules/rmhost.smk"
include: "rules/assembly.smk"
include: "rules/alignment.smk"
include: "rules/binning.smk"
include: "rules/checkm.smk"
include: "rules/classify.smk"

'''
if config["params"]["begin"] == "raw":
    include: "rules/fastqc.smk"
    include: "rules/trimming.smk"
    include: "rules/rmhost.smk"

include: "rules/assembly.smk"
include: "rules/coassembly.smk"
include: "rules/metaquast.smk"
include: "rules/prediction.smk"
include: "rules/alignment.smk"
include: "rules/binning.smk"
include: "rules/cobinning.smk"
include: "rules/checkm.smk"
include: "rules/annotation.smk"
include: "rules/classification.smk"
include: "rules/profiling.smk"
include: "rules/burst.smk"
include: "rules/upload.smk"
include: "rules/dereplication.smk"
'''

rule all:
    input:
        rules.simulate_all.input,
        rules.trimming_all.input,
        rules.rmhost_all.input,
        rules.assembly_all.input,
        rules.alignment_all.input,
        rules.binning_all.input,
        rules.checkm_all.input,
        rules.classify_all.input
